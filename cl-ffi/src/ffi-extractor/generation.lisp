(in-package :ffi-extractor)

(defparameter *header-files*
  (list "stddef.h"                      ; needed for offsetof()
        "stdio.h"))

(defun generate-c-program (manifest &key (stream *standard-output*)
                                    &aux (*print-case* :downcase))
  (let ((header-files (manifest-header-files manifest)))
    (dolist (file (append *header-files* header-files))
      (format stream "#include <~A>~%" file))
    (write-char #\newline stream))
  (format stream "int main(int argc, char **argv) {~%")
  (format stream "puts(\";;; This file has been generated by the cl-ffi ~
                  extractor.\");")
  (dolist (form manifest)
    (write-char #\newline stream)
    (case (car form)
      (include
       nil)
      (enum
       (generate-c-enum (cdr form) stream))
      (struct
       (generate-c-struct (cdr form) stream))
      (t
       (error "invalid manifest form ~S" form))))
  (format stream "}~%"))

(defun generate-c-enum (form stream)
  (destructuring-bind ((name c-name) (&rest constants)) form
    (declare (ignore c-name))
    (format stream "puts(\"\\n(ffi:define-enum (~A)\");~%" name)
    (format stream "puts(\"(\");~%")
    (dolist (constant constants)
      (destructuring-bind (constant-name value) constant
        (format stream "printf(\"  (~S %d)\\n\", ~A);~%"
                constant-name value)))
    (format stream "puts(\"))\");~%")))

(defun generate-c-struct (form stream)
  (destructuring-bind ((name c-name) (&rest members)) form
    (format stream "puts(\"\\n(ffi:define-struct (~A)\");~%" name)
    (format stream "puts(\"(\");~%")
    (dolist (member members)
      (destructuring-bind (member-name type member-c-name
                           &key (count 1))
          member
        (format stream "printf(\"  (~S ~S :count ~D :offset %Zu)\\n\", ~
                        offsetof(~A, ~A));~%"
                member-name type count c-name member-c-name)))
    (format stream "puts(\"))\");~%")))
