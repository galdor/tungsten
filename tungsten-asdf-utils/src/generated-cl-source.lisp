(in-package :asdf-utils)

(defclass generated-cl-source (asdf:cl-source-file)
  ((generation
    :type list
    :initarg :generation
    :reader generated-cl-source-generation
    :documentation "The call to perform in order to generate the Common Lisp code as a (PACKAGE FUNCTION &REST ARGUMENTS) form.")
   (dependencies
    :type list
    :initarg :dependencies
    :reader generated-cl-source-dependencies
    :documentation "The list of files and directories generation depends on."))
  (:documentation "An ASDF component representing a Common Lisp source file generated by Common Lisp code."))

(defclass generate-cl-source (asdf:downward-operation)
  ()
  (:documentation "An ASDF operation which calls Common Lisp code to generate a Common Lisp source file."))

(defmethod asdf:input-files ((op generate-cl-source)
                             (component generated-cl-source))
  (let* ((component-path (pathname (asdf:component-pathname component)))
         (base-directory (make-pathname :defaults component-path
                                        :name nil :type nil))
         (dependencies (generated-cl-source-dependencies component))
         (files (list component-path)))
    (dolist (input dependencies (nreverse files))
      (let ((path (pathname input)))
        (cond
          ((pathname-name path)
           (push path files))
          (t
           (dolist (child-path
                    (find-files (merge-pathnames path base-directory)))
             (push child-path files))))))))

(defmethod asdf:output-files ((op generate-cl-source)
                              (component generated-cl-source))
  (list (asdf:component-pathname component)))

(defmethod asdf:input-files ((op asdf:compile-op)
                             (component generated-cl-source))
  (asdf:output-files 'generate-cl-source component))

(defmethod asdf:component-depends-on ((op generate-cl-source)
                                      (component generated-cl-source))
  `((asdf:prepare-op ,component) ,@(call-next-method)))

(defmethod asdf:component-depends-on ((op asdf:compile-op)
                                      (component generated-cl-source))
  `((generate-cl-source ,component) ,@(call-next-method)))

(defmethod asdf:component-depends-on ((op asdf:load-source-op)
                                      (component generated-cl-source))
  `((generate-cl-source ,component) ,@(call-next-method)))

(defmethod asdf:perform ((op generate-cl-source)
                         (component generated-cl-source))
  (let* ((output-paths (asdf:output-files op component))
         (output-path (first output-paths)))
    (asdf:asdf-message "; generating ~A~%" output-path)
    (with-open-file (stream output-path :direction :output
                                        :if-exists :supersede
                                        :if-does-not-exist :create)
      (let ((*standard-output* stream))
        (apply 'uiop:symbol-call
               (generated-cl-source-generation component))))))

(defun find-files (path)
  (declare (type pathname path))
  (labels ((directory-path-p (path)
             (declare (type pathname path))
             (and (not (pathname-name path))
                  (not (pathname-type path))))
           (directory-path (path)
             (declare (type pathname path))
             (if (directory-path-p path)
                 path
                 (make-pathname :directory
                                (append (or (pathname-directory path)
                                            (list :relative))
                                        (list (file-namestring path)))
                                :name nil :type nil :defaults path))))
    (let ((paths nil)
          (children (directory (make-pathname :defaults (directory-path path)
                                              :type :wild :name :wild))))
      (dolist (child children paths)
        (if (directory-path-p child)
            (setf paths (append paths (find-files child)))
            (push child paths))))))
