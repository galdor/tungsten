(in-package :core-test)

(defmacro check-buffer-equal (octets buffer)
  (let ((buffer-var (gensym "BUFFER-")))
    `(let ((,buffer-var ,buffer))
       (check-equalp ,(core:octet-vector octets)
                     (subseq (core:buffer-data ,buffer-var)
                             (core:buffer-start ,buffer-var)
                             (core:buffer-end ,buffer-var))))))

(deftest buffer ()
  (let ((buffer (core:make-buffer 4)))
    (check-buffer-equal #() buffer)
    (core:buffer-reset buffer)
    (check-buffer-equal #() buffer)
    (core:buffer-append-octet buffer 1)
    (check-buffer-equal #(1) buffer)
    (core:buffer-append-octet buffer 2)
    (check-buffer-equal #(1 2) buffer)
    (core:buffer-skip buffer 1)
    (check-buffer-equal #(2) buffer)
    (core:buffer-append-octet buffer 3)
    (core:buffer-append-octet buffer 4)
    (core:buffer-skip buffer 3)
    (check-buffer-equal #() buffer)
    (core:buffer-append-octets buffer (core:octet-vector* 1 2))
    (check-buffer-equal #(1 2) buffer)
    (core:buffer-append-octets buffer (core:octet-vector* 3 4))
    (check-buffer-equal #(1 2 3 4) buffer)
    (core:buffer-skip buffer 3)
    (check-buffer-equal #(4) buffer)
    (core:buffer-append-octets buffer (core:octet-vector* 5 6))
    (check-buffer-equal #(4 5 6) buffer)
    (core:buffer-append-octets buffer (core:octet-vector* 7 8 9))
    (check-buffer-equal #(4 5 6 7 8 9) buffer)))

