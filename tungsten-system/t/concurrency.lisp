(in-package :system-test)

(deftest condition-variables/signal-one-child ()
  (let ((condition-variable (system:make-condition-variable))
        (mutex (system:make-mutex))
        (flag nil))
    (flet ((child-function ()
             (system:with-mutex (mutex)
               (when (system:wait-condition-variable condition-variable mutex
                                                     :timeout 1.0)
                 (setf flag t)))))
      (let ((child (system:make-thread "test-child" #'child-function)))
        (sleep 0.5)
        (system:with-mutex (mutex)
          (system:signal-condition-variable condition-variable))
        (system:join-thread child)
        (check-true flag)))))

(deftest condition-variables/signal-multiple-children ()
  (let ((condition-variable (system:make-condition-variable))
        (mutex (system:make-mutex))
        (counter 0))
    (flet ((child-function ()
             (system:with-mutex (mutex)
               (when (system:wait-condition-variable condition-variable mutex
                                                     :timeout 1.0)
                 (incf counter)))))
      (let ((children nil))
        (dotimes (i 32)
          (push (system:make-thread "test-child" #'child-function) children))
        (sleep 0.5)
        (system:with-mutex (mutex)
          (system:signal-condition-variable condition-variable))
        (dolist (child children)
          (system:join-thread child))
        (check= 1 counter)))))

(deftest condition-variables/broadcast-one-child ()
  (let ((condition-variable (system:make-condition-variable))
        (mutex (system:make-mutex))
        (flag nil))
    (flet ((child-function ()
             (system:with-mutex (mutex)
               (when (system:wait-condition-variable condition-variable mutex
                                                     :timeout 1.0)
                 (setf flag t)))))
      (let ((child (system:make-thread "test-child" #'child-function)))
        (sleep 0.5)
        (system:with-mutex (mutex)
          (system:broadcast-condition-variable condition-variable))
        (system:join-thread child)
        (check-true flag)))))

(deftest condition-variables/broadcast-multiple-children ()
  (let ((condition-variable (system:make-condition-variable))
        (mutex (system:make-mutex))
        (counter 0))
    (flet ((child-function ()
             (system:with-mutex (mutex)
               (when (system:wait-condition-variable condition-variable mutex
                                                     :timeout 1.0)
                 (incf counter)))))
      (let ((children nil))
        (dotimes (i 32)
          (push (system:make-thread "test-child" #'child-function) children))
        (sleep 0.5)
        (system:with-mutex (mutex)
          (system:broadcast-condition-variable condition-variable))
        (dolist (child children)
          (system:join-thread child))
        (check= (length children) counter)))))
