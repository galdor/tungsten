(in-package :json-test)

(deftest parse-pointer ()
  (macrolet ((check-pointer (expected-pointer string)
               (let ((pointer (gensym "POINTER-")))
                 `(let ((,pointer (json:parse-pointer ,string)))
                    (unless (json:pointer-equal ,pointer ,expected-pointer)
                      (fail "~S was parsed as ~S which is not POINTER-EQUAL ~
                             to ~S" ,string ,pointer ,expected-pointer))))))
    (check-pointer '() "")
    (check-pointer '("foo") "/foo")
    (check-pointer '("foo" "bar") "/foo/bar")
    (check-pointer '("x" "y" "z") "/x/y/z")
    (check-pointer '("" "abc" "" "") "//abc//")
    (check-pointer '("~foo~" "/a/b/c/") "/~0foo~0/~1a~1b~1c~1")
    (check-signals json:pointer-parse-error (json:parse-pointer "foo"))
    (check-signals json:pointer-parse-error (json:parse-pointer "/fo~"))
    (check-signals json:pointer-parse-error (json:parse-pointer "/~fo"))))

(deftest serialize-pointer ()
  (macrolet ((check-pointer (string pointer)
               `(check-string= ,string (json:serialize-pointer ,pointer))))
    (check-pointer "" '())
    (check-pointer "/foo" '("foo"))
    (check-pointer "/foo/bar" '("foo" "bar"))
    (check-pointer "/x/y/z" '("x" "y" "z"))
    (check-pointer "//abc//" '("" "abc" "" ""))
    (check-pointer "/~0foo~0/~1a~1b~1c~1" '("~foo~" "/a/b/c/"))))

(deftest pointer-equal ()
  (check-true (json:pointer-equal '() '()))
  (check-true (json:pointer-equal '("a") '("a")))
  (check-true (json:pointer-equal '("a" "b") '("a" "b")))
  (check-false (json:pointer-equal '("a") '("b")))
  (check-false (json:pointer-equal '("a" "b") '("a" "c")))
  (check-false (json:pointer-equal '("a") '("a" "c")))
  (check-false (json:pointer-equal '() '("a"))))

(deftest pointer-ref ()
  (check-equalp #(1 2 3) (json:pointer-ref "" #(1 2 3)))
  (check-equalp 1 (json:pointer-ref "/0" #(1 2 3)))
  (check-equalp 3 (json:pointer-ref "/2" #(1 2 3)))
  (check-signals json:invalid-pointer (json:pointer-ref "/-1" #(1 2 3)))
  (check-signals json:invalid-pointer (json:pointer-ref "/3" #(1 2 3)))
  (check-equalp 1 (json:pointer-ref "/x~1y" '(("x/y" . 1) ("z" . 2))))
  (check-equalp 2 (json:pointer-ref "/y/z" '(("x" . 1) ("y" . (("z" . 2))))))
  (check-signals json:invalid-pointer (json:pointer-ref "/y" '(("x" . 1)))))

(deftest pointer-ref/rfc6901 ()
  ;; See RFC 6901 5. JSON String Representation
  (let ((data '(("foo" . #("bar" "baz"))
                ("" . 0)
                ("a/b" . 1)
                ("c%d" . 2)
                ("e^f" . 3)
                ("g|h" . 4)
                ("i\\\\j" . 5)
                ("k\\\"l" . 6)
                (" " . 7)
                ("m~n" . 8))))
    (check-equalp data (json:pointer-ref "" data))
    (check-equalp #("bar" "baz") (json:pointer-ref "/foo" data))
    (check-equalp "bar" (json:pointer-ref "/foo/0" data))
    (check-equalp 0 (json:pointer-ref "/" data))
    (check-equalp 1 (json:pointer-ref "/a~1b" data))
    (check-equalp 2 (json:pointer-ref "/c%d" data))
    (check-equalp 3 (json:pointer-ref "/e^f" data))
    (check-equalp 4 (json:pointer-ref "/g|h" data))
    (check-equalp 5 (json:pointer-ref "/i\\\\j" data))
    (check-equalp 6 (json:pointer-ref "/k\\\"l" data))
    (check-equalp 7 (json:pointer-ref "/ " data))
    (check-equalp 8 (json:pointer-ref "/m~0n" data))))
